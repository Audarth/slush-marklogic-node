# MarkLogic-Node Generator

This application was generated by the MarkLogic-Node [Slush](https://github.com/klei/slush) generator, with the following components:

- [AngularJS](https://angularjs.org/)
- [Gulp](http://gulpjs.com/)
- [node.js](http://nodejs.org/): very thin layer, hosting the Angular code and proxying MarkLogic REST API requests
- [Roxy Deployer](https://github.com/marklogic/roxy): bootstrap MarkLogic databases, application servers, etc; scaffolding for MarkLogic REST API service extensions

## Install Required Dependencies

- [node.js](http://nodejs.org/download/)
- [npm](https://www.npmjs.com/): Built-in package manager for node (comes with
  node, but check to be sure you have latest version: `npm install -g npm`)
- [gulp](http://gulpjs.com/): Javascript task automation (`npm install -g
  gulp`)
- [Bower](http://bower.io/): A package manager for front-end libraries (`npm
  install -g bower`)
- [Git](https://git-scm.com/) - Roxy depends on this version control system
- [Ruby](https://www.ruby-lang.org/en/documentation/installation/) - Roxy
  depends on Ruby in order to run server configuration scripts

# Running the application

    ./ml local bootstrap
    ./ml local deploy modules

On Windows, that would be:

    ml.bat local bootstrap
    ml.bat local deploy modules

Install additional dependencies using the bower package manager:

    bower install

If you want to upload a dictionary for spell-suggestions:

    ./ml local deploy content

On Windows:

    ml.bat local deploy content

Edit `./local.json` to set your desired ports

    gulp serve-local # this will watch the .less file for changes, compile them to .css, and run the node server

# Installation and deployment on server

See etc/INSTALL.md

# Data

## Sample Data

The application comes with 3000 JSON documents generated by json-generator.com.
You can load them with
(MLCP)[https://docs.marklogic.com/guide/ingestion/content-pump] like this:

    ./ml local mlcp -options_file import-sample-data.options

Or on Windows:

    ml.bat local mlcp -options_file import-sample-data.options

## General Data Information

The application comes with a sample set of JSON data. The detail controller,
the part that handles showing your data, can not only handle JSON, but also
XML, Binary, and Text data out of the box.

## Running with PM2

To run you must first install pm2 if you do not have it with:

`npm install pm2 -g`

It's very **Important** that when deploying to a secure server that you do all pm2 commands as the pm2 user by using:

`sudo su pm2`

You can then launch the app using pm2 with:

`pm2 startOrRestart boot.json`

You can also launch the app using different environment configurations in boot.json (env name prefixed with "env_"), for example:

`pm2 startOrRestart boot.json --env prod`

You can also save your current pm2 deployments with:

`pm2 save`

You should run `pm2 save` whenever you deploy a new app.

To view all running pm2 applications use:

`pm2 list`

To view any logs use:

`pm2 logs`

To monitor ram or cpu usage use:

`pm2 monit`

**If** you've deployed applications previously but don't see them when you run pm2 list then it might be because you're not logged in as the pm2 user or you deployed them under a different user.

If you accidently launch pm2 under your own account then you can kill the process with:

`pm2 kill`

And if you accidently run that command when logged in as the pm2 user then you can start pm2 and resurrect all processes from the last `pm2 save` with:

`pm2 resurrect`

For more information use:

`pm2 help`

## Deploying with PM2

To deploy, make sure both your local machine and your remote server/deployment target have pm2 installed with:

`npm install pm2 -g`

Make sure you have the file `ecosystem.json` with any saved deployment targets inside, to create this file or add a new deployment target run:

`gulp add-deploy-target`

`ecosystem.json` will include any config as well as any deployment config along with your credentials. It is git ignored by default and we recommend you avoid commiting it and instead put any repository appropriate configuration in `boot.json`

First initialize the target host:

`pm2 deploy TARGETNAME setup`

Then deploy your latest code from your git repository and run any post-deploy commands with:

`pm2 deploy TARGETNAME`

**Hint**, pm2 automatically looks `ecosystem.json` in your current directory, but you can use other config files with `pm2 deploy otherEcosystemFile.json TARGETNAME`

If you have files you haven't commited, pm2 will ask you to commit them before deploying, to ignore this use `--force`:

`pm2 deploy TARGETNAME --force`

With your application deployed follow the above "Running with PM2" instructions to start the application, once you've started the app it will listen for changes and automatically restart when you make deploy changes with `pm2 deploy TARGETNAME`.

For more information use:

`pm2 deploy help`
